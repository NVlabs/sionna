{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Background Low-density Parity-check Codes\n",
    "\n",
    "We start with a Python version of the 5G NR LDPC decoder architecture, which is then used as blueprint for the later CUDA implementation. \n",
    "If you are already familiar with the concept of belief propagation (BP) decoding, you can skip this part of the tutorial.\n",
    "\n",
    "![LDPC Basics](../../figs/tutorial_ldpc_basics.png)\n",
    "<p style=\"text-align: center;\">Fig. 1: Parity-check matrix and decoding graph of the (7,4) Hamming code.</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background: Channel Coding in 5G\n",
    "\n",
    "In 5G NR, there are two major channel coding schemes: [Low-density Parity-check (LDPC)](https://en.wikipedia.org/wiki/Low-density_parity-check_code) and Polar codes. LDPC codes are used for the data channels while Polar codes are used for the control channels. This tutorial focuses only on the LDPC decoder as this is one of the most compute-intensive components in the 5G stack.\n",
    "\n",
    "LDPC codes have been invented in 1963 by Robert G. Gallager but were long forgotten due to their high decoding complexity. After their rediscovery by MacKay in 1996, they have become the workhorse of many modern communication standards, including 5G NR.\n",
    "\n",
    "The core idea of LDPC decoding is an iterative algorithm based on belief propagation. These iterations can be easily parallelized as each processing node is independent of the others, making them an ideal candidate for GPU acceleration. For further details on LDPC codes in OAI, we refer to [Romani2020].\n",
    "\n",
    "A machine learning enhanced version of the LDPC decoder has been proposed in [Nachmani2016] and is available as [Sionna Tutorial on Weighted Belief Propagation Decoding](https://nvlabs.github.io/sionna/phy/tutorials/Weighted_BP_Algorithm.html).\n",
    "\n",
    "\n",
    "## Overview Decoder Implementation\n",
    "\n",
    "![LDPC Acceleration Overview](../../figs/tutorial_ldpc_kernel.png)\n",
    "<p style=\"text-align: center;\">Fig. 2: Overview of the LDPC BP decoding algorithm.</p>\n",
    "\n",
    "An overview of the LDPC BP decoding algorithm is shown in Fig. 2 above.\n",
    "The core decoding algorithm is implemented in the *update_cn_kernel(.)* and *update_vn_kernel(.)* functions. Both kernels are iteratively executed and perform the check node (CN) and variable node (VN) updates, respectively. The decoder stops when the maximum number of iterations is reached. An additional early stopping condition could also be applied to reduce the average number of iterations.\n",
    "\n",
    "*pack_bits_kernel(.)* maps the soft-values to hard-decided bits and packs them into a more compact byte-representation which is required for the OAI processing pipeline.\n",
    "\n",
    "Note that the decoder is implemented using `int` datatypes instead of `float`. This ensures compatibility with OAI.\n",
    "\n",
    "The Python code of this tutorial can be also found in [tutorials/ldpc_cuda/python/numpy_decoder.py](https://github.com/NVlabs/sionna-rk/blob/main/tutorials/ldpc_cuda/python/numpy_decoder.py)\n",
    "\n",
    "### Python Imports\n",
    "\n",
    "Let us now import the relevant libraries. We use the `LDPC5GEncoder` from Sionna to simplify the code construction. Sionna is not required to run the final CUDA decoder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the required libraries\n",
    "import os # Configure which GPU\n",
    "if os.getenv(\"CUDA_VISIBLE_DEVICES\") is None:\n",
    "    gpu_num = 0 # Use \"\" to use the CPU\n",
    "    os.environ[\"CUDA_VISIBLE_DEVICES\"] = f\"{gpu_num}\"\n",
    "\n",
    "# Set the TF log level to only show errors\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Import Sionna LDPCEncoder LDPC code definitions\n",
    "from sionna.phy.fec.ldpc import LDPC5GEncoder, LDPC5GDecoder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basegraph selection\n",
    "\n",
    "In 5G NR, the LDPC code is defined by two basegraphs (`bg`) each with 8 different realizations (selected by the lifting set index `ils`) depending on the code length and rate. The basegraph selection must be done during each decoding execution as the code parameters can dynamically change.\n",
    "\n",
    "The LDPC code construction itself is a quasi-cyclic (QC) LDPC code with lifting factor $Z$ which takes values between 2,...,384. For details see [Richardson2018]."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_bg(ils, bg, verbose=False):\n",
    "    \"\"\"Pre-generates basegraph description for the given lifting set index and basegraph number.\n",
    "\n",
    "    This can be precomputed and stored before the decoding process.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    ils : int | 0,...,7\n",
    "        lifting set index of bg as defined in 38.212 Tab 5.3.2-1.\n",
    "    bg : int | 1,2\n",
    "        Basegraph number\n",
    "    verbose : bool\n",
    "        If True, additional information is printed\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    bg_vn : list of tuples\n",
    "        Each tuple contains the variable node index, the check node index, the cyclic shift and the offset for the memory access of the message.\n",
    "    bg_cn : list of tuples\n",
    "        Each tuple contains the check node index, the variable node index, the cyclic shift and the offset for the memory access of the message.\n",
    "    bg_vn_degree : list\n",
    "        List of variable node degrees.\n",
    "    bg_cn_degree : list\n",
    "        List of check node degrees.\n",
    "    \"\"\"\n",
    "\n",
    "    if bg==1:\n",
    "        bg = \"bg1\"\n",
    "    else:\n",
    "        bg = \"bg2\"\n",
    "    # Use sionna to load the basegraph\n",
    "    enc = LDPC5GEncoder(12, 24) # dummy encoder\n",
    "    mat_ref = enc._load_basegraph(ils, bg)\n",
    "\n",
    "    #########################################################\n",
    "    # Generate bg compact description\n",
    "    #########################################################\n",
    "\n",
    "    # From VN perspective\n",
    "    bg_vn = []\n",
    "    msg_offset = 0 # Counter how many messages blocks have been passed already\n",
    "    for idx_vn in range(mat_ref.shape[1]):\n",
    "        t = []\n",
    "        for idx_cn in range(mat_ref.shape[0]):\n",
    "            if mat_ref[idx_cn, idx_vn] != -1:\n",
    "                t.append((idx_vn, idx_cn, int(mat_ref[idx_cn, idx_vn]),\n",
    "                          msg_offset))\n",
    "                msg_offset += 1\n",
    "        bg_vn.append(t)\n",
    "\n",
    "    if verbose:\n",
    "        print(bg_vn)\n",
    "\n",
    "    # From CN perspective\n",
    "    bg_cn = []\n",
    "    for idx_cn in range(mat_ref.shape[0]):\n",
    "        t = []\n",
    "        for idx_vn in range(mat_ref.shape[1]):\n",
    "            if mat_ref[idx_cn, idx_vn] != -1:\n",
    "                # Find message offset from VN perspective\n",
    "                # Find matching entry in bg_vn to get message offset\n",
    "                for vn_entry in bg_vn[idx_vn]:\n",
    "                    if vn_entry[1] == idx_cn:\n",
    "                        msg_offset = vn_entry[3]\n",
    "                        break\n",
    "                t.append((idx_cn, idx_vn, int(mat_ref[idx_cn, idx_vn]),\n",
    "                          msg_offset))\n",
    "        bg_cn.append(t)\n",
    "    if verbose:\n",
    "        print(bg_cn)\n",
    "\n",
    "    bg_vn_degree = [len(bg_vn[i]) for i in range(len(bg_vn))]\n",
    "    bg_cn_degree = [len(bg_cn[i]) for i in range(len(bg_cn))]\n",
    "\n",
    "    if verbose:\n",
    "        print(bg_vn_degree)\n",
    "        print(bg_cn_degree)\n",
    "\n",
    "    return bg_vn, bg_cn, bg_vn_degree, bg_cn_degree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This can be be precomputed for $bg=1$ and $bg=2$ and for all possible values of $ils=0,...,7$ leading to 14 different code definitions. For the sake of readability of this Python implementation, we re-run the above function during each call of the decoding function.\n",
    "\n",
    "Before decoding, the decoder needs to load the exact code configuration for the given basegraph $bg$ and lifting factor $z$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def init_basegraph(bg, z):\n",
    "    \"\"\"Initializes the basegraph, its dimensions and number of edges/messages.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    bg : int | 1,2\n",
    "        Basegraph number\n",
    "    z : int | 2,...,384\n",
    "        Lifting factor\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    bg_vn : list of tuples\n",
    "        Each tuple contains the variable node index, the check node index, the cyclic shift and the offset for the memory access of the message.\n",
    "    bg_cn : list of tuples\n",
    "        Each tuple contains the check node index, the variable node index, the cyclic shift and the offset for the memory access of the message.\n",
    "    bg_vn_degree : list\n",
    "        List of variable node degrees.\n",
    "    bg_cn_degree : list\n",
    "        List of check node degrees.\n",
    "    num_cols : int\n",
    "        Number of variable nodes.\n",
    "    num_rows : int\n",
    "        Number of check nodes.\n",
    "    num_edges : int\n",
    "        Number of edges/messages in the graph.\n",
    "    \"\"\"\n",
    "\n",
    "    # These values are hard-coded for the basegraphs bg1 and bg2\n",
    "    # They are defined the 38.212.\n",
    "    if bg == 1:\n",
    "        num_rows = 46\n",
    "        num_cols = 68\n",
    "        num_nnz = 316 # Num non-zero elements in bg\n",
    "    else: # bg2\n",
    "        num_rows = 42\n",
    "        num_cols = 52\n",
    "        num_nnz = 197 # Num non-zero elements in bg\n",
    "\n",
    "    # Number of variable nodes\n",
    "    num_vns = num_cols * z\n",
    "    # Number of check nodes\n",
    "    num_cns = num_rows * z\n",
    "\n",
    "    # Number of edges/messages in the graph\n",
    "    num_edges = num_nnz * z\n",
    "\n",
    "    # Lifting set according to 38.212 Tab 5.3.2-1\n",
    "    s_val = [[2, 4, 8, 16, 32, 64, 128, 256],\n",
    "             [3, 6, 12, 24, 48, 96, 192, 384],\n",
    "             [5, 10, 20, 40, 80, 160, 320],\n",
    "             [7, 14, 28, 56, 112, 224],\n",
    "             [9, 18, 36, 72, 144, 288],\n",
    "             [11, 22, 44, 88, 176, 352],\n",
    "             [13, 26, 52, 104, 208],\n",
    "             [15, 30, 60, 120, 240]]\n",
    "\n",
    "    # Find lifting set index\n",
    "    ils = -1\n",
    "    for i in range(len(s_val)):\n",
    "        for j in range(len(s_val[i])):\n",
    "            if z == s_val[i][j]:\n",
    "                ils = i\n",
    "                break\n",
    "    # This case should not happen\n",
    "    assert ils != -1, \"Lifting factor not found in lifting set\"\n",
    "\n",
    "    # Load base graph; this will become a lookup table in CUDA\n",
    "    bg_vn, bg_cn, bg_vn_degree, bg_cn_degree = get_bg(ils, bg)\n",
    "\n",
    "    return bg_vn, bg_cn, bg_vn_degree, bg_cn_degree, num_cols, num_rows, num_edges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Memory Layout\n",
    "\n",
    "The resulting parity-check matrix after lifting can be visualized using the code below. Each blue dot represents a connection from a check node to a variable node and, thus, an outgoing message from a check node to a variable node which needs to be stored in the message buffer.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    " # Example code construction\n",
    "k = 8448\n",
    "n = 368*68\n",
    "enc = LDPC5GEncoder(k, n)\n",
    "dec = LDPC5GDecoder(enc)\n",
    "\n",
    "plt.spy(dec._pcm, markersize=0.3);\n",
    "plt.xlabel('Variable Nodes');\n",
    "plt.ylabel('Check Nodes');\n",
    "plt.title(f'Basegraph {enc._bg}, Lifting factor: {enc._z}');\n",
    "plt.show();\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "During decoding, it requires to update three different message buffers:\n",
    "\n",
    "1. **llr_channel**: This buffer stores the LLRs from the channel. This is of size $Z*68$ for $bg=1$ and $Z*52$ for $bg=2$.\n",
    "2. **llr_total **: This buffer accumulates the LLRs from the variable nodes. This is of size $Z*68$ for $bg=1$ and $Z*52$ for $bg=2$.\n",
    "3. **llr_msg**: This buffer stores the messages from the check nodes to the variable nodes. This is of size $Z*316$ for $bg=1$ and $Z*197$ for $bg=2$.\n",
    "\n",
    "Note that in practice as a result of rate-matching many VNs are punctured. This allows more efficient decoders but not updating these unused VNs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CN Update Function\n",
    "\n",
    "We are using the *min-sum* approximation for the check node update, given as \n",
    "\n",
    "$$\\qquad y_{j \\to i} = \\alpha_{j \\to i} \\cdot \\beta \\cdot {min}_{i' \\in \\mathcal{N}(j) \\setminus i} \\left(|x_{i' \\to j}| \\right)$$\n",
    "\n",
    "where $y_{j \\to i}$ denotes the message from\n",
    "check node (CN) $j$ to variable node (VN) $i$ and $x_{i \\to j}$ from\n",
    "VN $i$ to CN $j$, respectively. Further, $\\mathcal{N}(j)$ denotes\n",
    "all indices of connected VNs to CN $j$ and\n",
    "\n",
    "$$\\alpha_{j \\to i} = \\prod_{i' \\in \\mathcal{N}(j) \\setminus i} \\operatorname{sign}(x_{i' \\to j})$$\n",
    "\n",
    "is the sign of the outgoing message. The parameter $\\beta$  defines the damping factor which is used to scale the outgoing CN messages.\n",
    "For further details we refer to [Chen2005]."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# In the later CUDA implementation, we use int8 dtypes for the LLRs.\n",
    "# Thus, we need to clip the LLRs to the range [-127, 127]\n",
    "MAX_LLR_VALUE = 127 # depends on dtype\n",
    "\n",
    "# Damping(=scaling) factor of the outgoing LLRs to improve the decoding performance.\n",
    "# This is a heuristic value and typically a good choice.\n",
    "DAMPING_FACTOR = 0.75\n",
    "\n",
    "def update_cn(llr_msg, llr_total, z, bg_cn, bg_cn_degree, num_rows, first_iter):\n",
    "    \"\"\"\n",
    "    Inputs\n",
    "    ------\n",
    "    llr_msg: np.array [num_edges]\n",
    "        Incoming LLRs from variable nodes\n",
    "    llr_total: np.array [num_vns]\n",
    "        Accumulated LLRs from variable nodes\n",
    "    z: int | 2,...,384\n",
    "        Lifting factor\n",
    "    bg_cn: list of tuples\n",
    "        Check node configuration\n",
    "    bg_cn_degree: list\n",
    "        Check node degree\n",
    "    num_rows: int\n",
    "        Number of rows in the base graph\n",
    "    first_iter: bool\n",
    "        Whether this is the first iteration\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    llr_msg: np.array [num_edges]\n",
    "        Updated LLRs from check nodes\n",
    "    \"\"\"\n",
    "    # Check node update function\n",
    "\n",
    "    # These two loops can be parallelized in CUDA\n",
    "    for i in range(z): # between 2 and 384\n",
    "        for idx_row in range(num_rows): # Either 46 or 42\n",
    "\n",
    "            cn_degree = bg_cn_degree[idx_row] # Check node degree\n",
    "\n",
    "            # List of tuples (idx_row, idx_col, s, msg_offset)\n",
    "            cn = bg_cn[idx_row] # len(cn) = cn_degree\n",
    "\n",
    "            # Search the \"extrinsic\" min of all incoming LLRs\n",
    "            # This means we need to find the min and the second min of all incoming LLRs\n",
    "            min_1 = MAX_LLR_VALUE\n",
    "            min_2 = MAX_LLR_VALUE\n",
    "            idx_min = -1\n",
    "            node_sign = 1\n",
    "\n",
    "            # Temp buffer for signs\n",
    "            msg_sign = np.ones((19,)) # Max CN degree is 19\n",
    "\n",
    "            for ii in range(cn_degree):\n",
    "\n",
    "                # Calculate the index of the message in the LLR array\n",
    "                msg_offset = cn[ii][3]\n",
    "                s = cn[ii][2]\n",
    "                idx_col = cn[ii][1]\n",
    "                msg_idx = msg_offset * z + i\n",
    "\n",
    "                # Total VN message\n",
    "                t = llr_total[idx_col*z + (i+s)%z]\n",
    "\n",
    "                # Make extrinsic by subtracting the previous msg\n",
    "                if not first_iter: # Ignore in first iteration\n",
    "                    t -= llr_msg[msg_idx]\n",
    "\n",
    "                # Store sign for 2nd recursion\n",
    "                sign = 1 if np.abs(t) == 0 else np.sign(t)\n",
    "\n",
    "                # Could be also used for syndrome-based check or early termination\n",
    "                node_sign *= sign\n",
    "                msg_sign[ii] = sign # For later sign calculation\n",
    "\n",
    "                # Find min and second min\n",
    "                t_abs = np.abs(t)\n",
    "\n",
    "                if t_abs < min_1:\n",
    "                    min_2 = min_1\n",
    "                    min_1 = t_abs\n",
    "                    idx_min = msg_idx\n",
    "                elif t_abs < min_2:\n",
    "                    min_2 = t_abs\n",
    "\n",
    "            # Apply damping factor\n",
    "            min_1 *= DAMPING_FACTOR\n",
    "            min_2 *= DAMPING_FACTOR\n",
    "\n",
    "            # Clip min_val to MAX_LLR_VALUE\n",
    "            min_1 = np.clip(min_1, -MAX_LLR_VALUE, MAX_LLR_VALUE)\n",
    "            min_2 = np.clip(min_2, -MAX_LLR_VALUE, MAX_LLR_VALUE)\n",
    "\n",
    "            # Apply min and second min to the outgoing LLR\n",
    "            for ii in range(cn_degree):\n",
    "                msg_offset = cn[ii][3]\n",
    "\n",
    "                msg_idx = msg_offset * z + i\n",
    "                if msg_idx == idx_min:\n",
    "                    min_val = min_2\n",
    "                else:\n",
    "                    min_val = min_1\n",
    "\n",
    "                # And update outgoing msg including sign\n",
    "                llr_msg[msg_idx] = min_val * node_sign * msg_sign[ii]\n",
    "\n",
    "    return llr_msg"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## VN Update Function\n",
    "\n",
    "The variable node update function sums all incoming messages from the check nodes and adds the channel LLRs\n",
    "\n",
    "$$x_{i \\to j} = \\sum_{j' \\in \\mathcal{M}(i) \\setminus j} y_{j' \\to i} + \\lambda_i$$\n",
    "\n",
    "where $\\lambda_i$ denotes the channel LLR associated to the $i$-th VN and $\\mathcal{M}(i) \\setminus j$ denotes the set of check nodes connected to VN $i$ excluding the check node $j$ itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def update_vn(llr_msg, llr_ch, llr_total, z, bg_vn, bg_vn_degree, num_cols):\n",
    "    \"\"\"\n",
    "    Inputs\n",
    "    ------\n",
    "    llr_msg: np.array [num_edges]\n",
    "        Incoming LLRs from check nodes\n",
    "    llr_ch: np.array [num_vns]\n",
    "        Channel LLRs\n",
    "    llr_total: np.array [num_vns]\n",
    "        Accumulated LLRs from variable nodes\n",
    "    z: int | 2,...,384\n",
    "        Lifting factor\n",
    "    bg_vn: list of tuples\n",
    "        Variable node configuration\n",
    "    bg_vn_degree: list\n",
    "        Variable node degree\n",
    "    num_cols: int\n",
    "        Number of variable nodes\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    llr_total: np.array [num_vns]\n",
    "        Updated LLRs from variable nodes\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    # This can be parallelized in CUDA\n",
    "    for i in range(z): # Between 2 and 384\n",
    "        for idx_col in range(num_cols): # Either 52 or 68\n",
    "\n",
    "            vn_degree = bg_vn_degree[idx_col] # Variable node degree\n",
    "\n",
    "            # List of tuples (idx_col, idx_row, s, msg_offset)\n",
    "            vn = bg_vn[idx_col] # len(vn) = vn_degree\n",
    "\n",
    "            # Accumulate all incoming LLRs\n",
    "            msg_sum = 0 # Should be int16\n",
    "            for j in range(vn_degree):\n",
    "\n",
    "                msg_offset = vn[j][3]\n",
    "                s = vn[j][2]\n",
    "\n",
    "                # Index of the msg in the LLR array\n",
    "                # It is the idx_col-th variable node, and the j-th message from the idx_row-th check node\n",
    "                msg_idx = msg_offset * z + (i-s)%z\n",
    "                # Accumulate all incoming LLRs\n",
    "                msg_sum += llr_msg[msg_idx].astype(np.int16)\n",
    "\n",
    "            # Add the channel LLRs\n",
    "            msg_sum += llr_ch[idx_col*z + i].astype(np.int16)\n",
    "\n",
    "            llr_total[idx_col*z + i] = msg_sum\n",
    "\n",
    "    return llr_total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hard-decision\n",
    "\n",
    "The final LLRs can now be hard-decided to bits. Further, OAI requires to return bytes instead of bit values.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pack_bits(llr_total, block_length, pack_bits=False):\n",
    "    \"\"\"\n",
    "    Inputs\n",
    "    ------\n",
    "    llr_total: np.array [num_vns]\n",
    "        LLRs from variable nodes\n",
    "    block_length: int\n",
    "        Number of payload bits that are returned after decoding\n",
    "    pack_bits: bool\n",
    "        If True, the bits are packed into a byte array\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    bits: np.array [block_length]\n",
    "        Decoded bits\n",
    "    \"\"\"\n",
    "\n",
    "    # OAI wants the bits in a byte array\n",
    "    if pack_bits:\n",
    "        # Round length to the nearest multiple of 8\n",
    "        block_length = int(np.ceil(block_length/8)*8)\n",
    "        bits = (llr_total[:block_length]<0).astype(np.uint8)\n",
    "        bits = np.packbits(bits)\n",
    "    else:\n",
    "        bits = (llr_total[:block_length]<0).astype(np.uint8)\n",
    "\n",
    "    return bits"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Main Decoding Function\n",
    "\n",
    "We can now run the full LDPC decoder by iteratively updating VN and CN update functions as depicted in Fig. 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def decode_ldpc(bg, z, block_length, num_iter, llr_ch):\n",
    "    \"\"\"\n",
    "    Inputs\n",
    "    ------\n",
    "    bg: int | 1,2\n",
    "        Basegraph used for decoding\n",
    "\n",
    "    z: int | 2,...,384\n",
    "        Lifting factor\n",
    "\n",
    "    block_length: int\n",
    "        Number of payload bits that are returned after decoding\n",
    "\n",
    "    num_iter: int\n",
    "        Max number of decoding iterations\n",
    "\n",
    "    llr_ch: np.array [68+z] or [52*z] for bg1 and bg2, respectively\n",
    "        Received channel LLRs\n",
    "    \"\"\"\n",
    "\n",
    "\n",
    "    ############################\n",
    "    # Initialize Variables\n",
    "    ############################\n",
    "\n",
    "    bg_vn, bg_cn, bg_vn_degree, bg_cn_degree, num_cols, num_rows, num_edges = init_basegraph(bg, z)\n",
    "\n",
    "    # Temporary message buffer\n",
    "    # Max size is 316*384\n",
    "    llr_msg = np.zeros((num_edges,), dtype=np.int8) # No need to initialize to 0\n",
    "\n",
    "    # VN accumulator\n",
    "    # We always init the max size of the LLR array given as 68*384\n",
    "    # The accumulator needs higher precision than the message buffer\n",
    "\n",
    "    llr_ch = llr_ch.astype(np.int8)\n",
    "\n",
    "    ############################\n",
    "    # Main Decoding Loop\n",
    "    ############################\n",
    "    llr_total = np.copy(llr_ch).astype(np.int16) # llr_total will be updated in the VN update\n",
    "\n",
    "    for i in range(num_iter):\n",
    "\n",
    "        # CN update\n",
    "        # llr_msg not read, only written to in first iteration; will be filled with outputs of this function\n",
    "        llr_msg = update_cn(llr_msg, llr_total, z, bg_cn, bg_cn_degree, num_rows, i==0)\n",
    "\n",
    "        # VN update\n",
    "        llr_total = update_vn(llr_msg, llr_ch, llr_total, z, bg_vn, bg_vn_degree, num_cols)\n",
    "\n",
    "    # Pack bits\n",
    "    bits = pack_bits(llr_total, block_length, pack_bits=True)\n",
    "\n",
    "    # [optional] apply syndrome check and if not successful return `num_iter+=1``\n",
    "\n",
    "    return bits, llr_total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run and Test the Decoder\n",
    "\n",
    "We can now run an end-to-end test of the decoder using the Sionna `LDPC5GEncoder`. Note that de-rate matching at the receiver must be done manually before decoding. This will be handled by the OAI stack in the future.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All payload bits decoded correctly!\n",
      "Shape of LLR input: (6656,)\n",
      "Shape of decoded bytes: (160,)\n"
     ]
    }
   ],
   "source": [
    "# Parameters\n",
    "k = 1280 # Payload size\n",
    "n = 2560 # Codeword size after rate matching\n",
    "num_iter = 8 # Number of decoding iterations\n",
    "llr_mag = 10 # LLR magnitude\n",
    "\n",
    "# Use Sionna for BG selection\n",
    "enc = LDPC5GEncoder(k, n)\n",
    "bg = 1 if enc._bg == \"bg1\" else 2\n",
    "z = enc._z\n",
    "\n",
    "# Draw random bits\n",
    "u = np.random.randint(0,2,k)\n",
    "\n",
    "# Encode using Sionna\n",
    "c = enc(np.expand_dims(u.astype(np.float32),0))[0].numpy()\n",
    "\n",
    "# Map to LLRs\n",
    "x = 1-2*c\n",
    "\n",
    "# Clip to max LLR value due to int8 representation\n",
    "llr_ch = np.clip((llr_mag * x),-127,127).astype(np.int8)\n",
    "\n",
    "# Get code parameters\n",
    "num_vn = 68*z if bg == 1 else 52*z\n",
    "parity_start = 22*z if bg == 1 else 10*z\n",
    "\n",
    "# Apply rate matching\n",
    "llr_input = np.zeros(num_vn,dtype=np.int8) # Takes care of the punctured bits (initialized to 0 LLR)\n",
    "llr_input[2*z:k] =  llr_ch[:k-2*z] # Unpunctured message bits\n",
    "llr_input[k:parity_start] = 127      # Shortened bits\n",
    "llr_input[parity_start:parity_start+n-k+2*z] = llr_ch[k-2*z:] # parity bits\n",
    "\n",
    "# Run decoder\n",
    "decoder_outputs,_ = decode_ldpc(bg, z, k, num_iter, llr_input)\n",
    "\n",
    "# Evaluate results\n",
    "u_hat = np.unpackbits(decoder_outputs.astype(np.uint8))[:k] # There may be a couple of extra bits if k is not a multiple of 8\n",
    "if np.all(u == u_hat):\n",
    "    print(\"All payload bits decoded correctly!\")\n",
    "else:\n",
    "    print(\"Decoding failed!\")\n",
    "\n",
    "print(f\"Shape of LLR input: {llr_input.shape}\")\n",
    "print(f\"Shape of decoded bytes: {decoder_outputs.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are now ready to start with the CUDA implementation!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
