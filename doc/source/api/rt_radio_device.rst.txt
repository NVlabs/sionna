Radio Devices
*************

A radio device refers to a :class:`~sionna.rt.Transmitter` or :class:`~sionna.rt.Receiver` equipped
with an :class:`~sionna.rt.AntennaArray` as specified by the :class:`~sionna.rt.Scene`'s properties
:attr:`~sionna.rt.Scene.tx_array` and :attr:`~sionna.rt.Scene.rx_array`, respectively.

The following code snippet shows how to instantiate a :class:`~sionna.rt.Transmitter`
equipped with a :math:`4 \times 2` :class:`~sionna.rt.PlanarArray` with cross-polarized isotropic antennas:

.. code-block:: Python

    scene.tx_array = PlanarArray(num_rows=4,
                                 num_cols=2,
                                 vertical_spacing=0.5,
                                 horizontal_spacing=0.5,
                                 pattern="iso",
                                 polarization="cross")

    my_tx = Transmitter(name="my_tx",
                        position=(0,0,0),
                        orientation=(0,0,0))

   scene.add(my_tx)

The position :math:`(x,y,z)` and orientation :math:`(\alpha, \beta, \gamma)` of a radio device
can be freely configured. The latter is specified through three angles corresponding to a 3D
rotation as defined in :eq:`rotation`.

The position and orientation are implemented as TensorFlow variables and can be made trainable.

Radio devices need to be explicitly added to the scene using the scene's method :meth:`~sionna.rt.Scene.add`
and can be removed from it using :meth:`~sionna.rt.Scene.remove`:

.. code-block:: Python

   scene = load_scene()
   scene.add(Transmitter("tx", [10.0, 0.0, 1.5], [0.0,0.0,0.0]))
   scene.remove("tx")


Transmitter
-----------
.. autoclass:: sionna.rt.Transmitter
   :members:
   :inherited-members:
   :exclude-members: scene

Receiver
--------
.. autoclass:: sionna.rt.Receiver
   :members:
   :inherited-members:
   :exclude-members: scene
